sudo apt-get install apache2-utils
ab [options] [http[s]://]hostname[:port]/path
Options设置:
-A uname:passwd 认证
-c 并发数
-n 连接总数

测试：
root# ab -c 100 -n 1000  http://192.168.1.226/
表示同时处理1000个请求并运行100次
Benchmarking 192.168.1.226 (be patient) 
Completed 100 requests 
Completed 200 requests 
Completed 300 requests 
Completed 400 requests 
Completed 500 requests 
Completed 600 requests 
Completed 700 requests 
Completed 800 requests 
Completed 900 requests 
Finished 1000 requests  

Server Software:        Apache/2.0.59  测试机apache版本号 
Server Hostname:        192.168.1.226 测试机主机名 
Server Port:            80 测试机端口 
Document Path:          / 测试机目录 
Document Length:        1456 bytes 文档大小 
Concurrency Level:      100 并发数 
Time taken for tests:   1.305834 seconds 整个测试持续的时间 

Complete requests:      1000 完成请求的数量 
Failed requests:        0 失败请求数量 
Write errors:           0 错误请求数量 
Total transferred:      1924263 bytes 整个测试的网络传输量 
HTML transferred:       1489488 bytes 整个测试html页面的网络传输量 
Requests per second:    765.79 [#/sec] (mean) 关注1：每秒事务数 
Time per request:       130.583 [ms] (mean) 关注2：平均事务响应时间 
Time per request:       1.306 [ms] (mean, across all concurrent requests) 每个请求实际运行时间的平均值 
Transfer rate:          1438.93 [Kbytes/sec] received 平均每秒网络上的流量 
Connection Times (ms) 
              min  mean[+/-sd] median   max 
Connect:       17   45  17.1     47      92 
Processing:    21   76  58.7     61     585 
Waiting:        1   56  24.0     52     116 
Total:         64  121  57.5    119     610 
网络上消耗时间的分解 
Percentage of the requests served within a certain time (ms)   
50%    119   
66%    122   
75%    125   
80%    132   
90%    139   
95%    172   
98%    325   
99%    465 
100%   610 (longest request) 


测试可能碰到的问题:

问题一、socket: Too many open files (24)
ulimit [-a查看|-u设置] 1024 临时设置文件打开数量

问题二、apr_socket_recv: Connection reset by peer (104)
问题三、Connection timed out (110)
1.sudo vi /etc/sysctl.conf 编辑
2.修改参数:
#防止洪水攻击，参数为0时禁用系统保护，可进行大并发测试
net.ipv4.tcp_syncookies = 0 (尽量修改以下两项替代)
#参数决定了SYN_RECV状态队列的数量，一般默认值为512或者1024，即超过这个数量，系统将不再接受新的TCP连接请求，一定程度上可以防止系统资源耗尽。可根据情况增加该值以接受更多的连接请求。
net.ipv4.tcp_max_syn_backlog = 819200
#默认值是5,对于远端的连接请求SYN，内核会发送SYN ＋ ACK数据报，以确认收到上一个 SYN连接请求包。这是所谓的三次握手( threeway handshake)机制的第二个步骤。这里决定内核在放弃连接之前所送出的 SYN+ACK 数目。不应该大于255，默认值是5，对应于180秒左右时间。
net.ipv4.tcp_synack_retries = 10

#当守护进程太忙而不能接受新的连接，就象对方发送reset消息，默认值是false。这意味着当溢出的原因是因为一个偶然的猝发，那么连接将恢复状态。只有在你确信守护进程真的不能完成连接请求时才打开该选项，该选项会影响客户的使用。
net.ipv4.tcp_abort_on_overflow = 1
#参数决定是否加速TIME_WAIT的sockets的回收，默认为0。
net.ipv4.tcp_tw_recycle = 1
#参数决定是否可将TIME_WAIT状态的sockets用于新的TCP连接，默认为0。
net.ipv4.tcp_tw_reuse = 1
#参数决定TIME_WAIT状态的sockets总数量，可根据连接数和系统资源需要进行设置。 
net.ipv4.tcp_max_tw_buckets = 819200
其它:
net.ipv4.conf.default.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv6.conf.all.disable_ipv6 = 1

3.sudo sysctl -p 生效

问题四、Invalid Concurrency [Range 0..20000] 
需要修改apache源代码support目录下ab.c文件，找到：
#define MAX_CONCURRENCY 20000
将宏定义的值改大，重新编译安装apache。

问题五、Cannot use concurrency level greater than total number of requests 
并发数(-c)<=请求数(-n)



网上流传方法二：
按如下修改 Apache 源码目录下 support/ab.c 文件，重新编译安装。

         elseif(status != APR_SUCCESS) {
             err_recv++;
             if(recverrok) {
                 bad++;
                 close_connection(c);
                 if(verbosity >= 1) {
                     charbuf[120];
                     fprintf(stderr,"%s: %s (%d)\n", "apr_socket_recv", apr_strerror(status, buf, sizeofbuf), status);
                }
                 return;
            } else{
                 bad++;                                 //添加
                 close_connection(c);                   //添加
                 //apr_err("apr_socket_recv", status);  //注释
                return;    //添加
             }
         }


